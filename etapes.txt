Parfait — voici une **liste ordonnée et pragmatique** des étapes de développement (back → front) pour ton projet React+Vite + Django + IA. Chaque étape inclut les tâches cruciales et les livrables attendus. Suis-les dans l’ordre — elles sont pensées pour limiter les dépendances et rendre chaque phase testable et livrable.

# Étapes de développement (Back → Front) — liste ordonnée

1. **Cadrage final & spécifications détaillées**

   * Finaliser le cahier des charges (validation des règles de calcul, gabarits PDF MINEDUB/MINESEC, mentions, barèmes).
   * Définir critères d’acceptation par fonctionnalité.
   * Livrable : spec fonctionnelle + liste d’APIs attendues + exemples de jeux de données.

2. **Architecture & design technique**

   * Schéma d’architecture (frontend, backend, DB, worker, stockage fichiers).
   * ERD (modèle de données) finalisé.
   * Spécification OpenAPI / contract API (endpoints, payloads, erreurs).
   * Choix technique définitif (WeasyPrint/wkhtmltopdf, Celery broker, stockage).
   * Livrable : diagrammes + doc API (Swagger).

3. **Setup environnement de dev & CI/CD**

   * Créer mono-repo ou mono-projet (frontend/ backend).
   * Git (branching strategy), pré-commit hooks, linters (ESLint, Prettier, flake8), tests unitaires initiaux.
   * Docker Compose skeleton (db, api, frontend, worker, redis).
   * CI pipeline (lint, tests unitaires, build).
   * Livrable : repo initial + pipeline.

4. **Backend — fondations & modèles**

   * Init Django + DRF.
   * Implémenter modèles clés (SchoolYear, Term, Sequence, Classroom, Teacher, Student, Subject, ClassSubject, Grade, MentionRule, Settings, Bulletin, AuditLog).
   * Admin Django pour gestion rapide.
   * Migrations et fixtures de dev (ex : classe fictive).
   * Livrable : API CRUD de base + DB migrée.

5. **Backend — Authentification & permissions**

   * Implémenter auth (JWT ou sessions selon choix), gestion rôles (Admin, Enseignant, Secrétariat).
   * Permissions per-object (enseignant -> ses class-subjects).
   * Endpoints user management (reset password, création).
   * Livrable : endpoints auth + tests d’accès.

6. **Backend — Engine de calcul métier**

   * Implémenter la logique de calcul (moyennes, totaux pondérés, rang, mentions, arrondis).
   * Exposer endpoints de calcul (calc/sequence, calc/term).
   * Écrire tests unitaires couvrant tous les cas (égalité de rang, absence de note, arrondis).
   * Livrable : module de calcul testé.

7. **Backend — Import/Export & historique**

   * Import CSV/XLSX avec mapping et prévisualisation (endpoint import).
   * Export XLSX/CSV des tables (notes, statistiques).
   * Historique/audit (qui a modifié quoi).
   * Livrable : import/export + audit.

8. **Backend — génération PDF & fichier**

   * Implémenter rendu PDF (templates HTML → PDF) pour bulletins (unitaire + batch) ; inclure logo, signatures, QR code.
   * Introduire file storage (local / S3-compatible).
   * Si tâches lourdes → configurer Celery + worker pour génération en background (queue).
   * Livrable : génération PDF fiable + endpoint récupération.

9. **Backend — IA (phase 1 : assistances simples)**

   * Endpoints IA minimalistes : `ai/appreciation`, `ai/anomaly-check`, `ai/risk`.
   * Démarrer avec règles heuristiques et modèles légers (scikit-learn ou templates string + règles).
   * Ajouter toggle ON/OFF et anonymisation des données.
   * Livrable : IA basique opérationnelle (texte d’appréciation + anomalies détectées).

10. **Frontend — squelette & auth**

    * Init React + Vite + TypeScript.
    * Setup routing, thème, i18n (FR/EN).
    * Pages de login, layout principal (menu latéral, header).
    * Intégration React Query / Axios pour appels API.
    * Livrable : app shell + login fonctionnel.

11. **Frontend — Dashboard & navigation**

    * Dashboard admin : sélection année/classe/sequence, indicateurs (progression saisie, alertes IA).
    * Vue liste classes, enseignants, matières.
    * Livrable : navigation et dashboards de base.

12. **Frontend — module Saisie de notes (priorité haute)**

    * Grille editable (virtualisée), navigation clavier, paste Excel.
    * Validation en temps réel (max barème, champs vides), messages d’erreur.
    * Boutons : sauvegarder brouillon, valider séquence, historique.
    * Indicateur d’avancement % de la classe.
    * Livrable : saisie notes complète et ergonomique.

13. **Frontend — import/export & preview**

    * UI d’import XLSX (mapping colonnes + prévisualisation).
    * UI d’export CSV/XLSX.
    * Livrable : flux import/preview fonctionnel.

14. **Frontend — bulletins (preview & génération)**

    * Aperçu PDF intégré (viewer), options de template (MINEDUB/MINESEC), choisir signatures, bilingue.
    * Bouton génération en lot (classe), suivi d’état (task queue).
    * Téléchargement / impression.
    * Livrable : génération & preview fonctionnels.

15. **Frontend — statistiques & IA UX**

    * Pages statistiques (moyennes, histogrammes, évolution).
    * Panel IA : suggestions d’appréciations (editable), liste anomalies détectées, recommandations pédagogiques.
    * Livrable : dashboard analytique + IA actionable.

16. **Tests automatisés & qualité**

    * Tests unitaires backend (calculs, permissions).
    * Tests frontend unitaires (composants critiques).
    * Tests E2E (Playwright/Cypress) pour scénario complet : import → saisie → validation → génération bulletin.
    * Audit de sécurité (scans deps, XSS/CSRF checks).
    * Livrable : suite de tests passant.

17. **Sécurité & sauvegardes**

    * Harden config : TLS, secrets gestion, password hashing, 2FA optionnel.
    * Implémenter backups automatisés DB + fichiers, scripts restore testés.
    * Livrable : procédure sauvegarde/restauration documentée.

18. **Préparation déploiement on-prem**

    * Docker Compose prod config (nginx, certs, api, frontend, worker, db).
    * Script d’installation (setup initial, migrations, user admin).
    * Option packaging Tauri/Electron si besoin pour installer app sur un poste.
    * Livrable : paquet d’installation / guide déployeur.

19. **Phase pilote / release initiale**

    * Installer dans une école pilote, former 1-2 utilisateurs (admin + 1 enseignant).
    * Collecter retours (bugs UX, règles métier manquantes).
    * Corriger et stabiliser.
    * Livrable : release V1 stable validée par pilote.

20. **Documentation & formation**

    * Manuel admin FR/EN, guide enseignant, guide installation.
    * API doc (Swagger), checklist reprise de données.
    * Livrable : documentation complète + packs formation.

21. **Maintenance & roadmap IA avancée**

    * Étendre IA : modèles plus robustes, entraînement avec données anonymisées, amélioration des appréciations, tableau de bord prédictif.
    * Versioning, release cadence, backlog des améliorations (mobile app, notification SMS).
    * Livrable : feuille de route évolutive.

