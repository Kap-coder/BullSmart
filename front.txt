**Contexte & Objectif :**
Je d√©veloppe une application compl√®te de gestion des bulletins scolaires Camerounais. Le frontend doit √™tre construit avec **React 18 + Vite + TailwindCSS + shadcn/ui + Axios + React Router + Zustand (ou Redux Toolkit)**.
Il doit consommer l‚ÄôAPI Django/DRF (backend d√©j√† d√©crit dans le super prompt pr√©c√©dent).
L‚ÄôIA doit g√©n√©rer le code √©tape par √©tape, avec une structure claire, des explications, et une UI moderne, responsive et professionnelle.

**Contraintes :**

* Respect strict du design simple, professionnel et lisible (tableaux, graphiques, exports).
* Gestion multi-r√¥les : Admin, Directeur, Enseignant, Parent, √âl√®ve (UI adapt√©e selon r√¥le).
* Connexion au backend via JWT (login, logout, refresh token).
* Utilisation de TailwindCSS + composants shadcn/ui (boutons, formulaires, cartes, modales).
* Graphiques dynamiques avec **Chart.js ou Recharts**.
* Support multi-device (responsive web + installable PWA).
* Fonctionnalit√©s IA accessibles depuis le frontend (analyse, recommandations).

---

### üîë √âtapes demand√©es √† l‚ÄôIA

1. **Initialisation du projet :**

   * Cr√©er projet avec `npm create vite@latest bulletin-frontend --template react`.
   * Configurer TailwindCSS + shadcn/ui.
   * Configurer React Router v6.
   * Installer Axios et Zustand (ou Redux Toolkit).
   * Cr√©er une structure de base :

     ```
     src/
       api/
       components/
       hooks/
       layouts/
       pages/
       store/
       utils/
     ```

2. **Authentification & State Management :**

   * Page Login + Register.
   * Connexion au backend via Axios.
   * Gestion JWT (stockage dans localStorage + refresh automatique).
   * Store global pour l‚Äôutilisateur (r√¥le, infos, token).

3. **Layouts & Navigation :**

   * Layout principal avec **Sidebar + Header**.
   * Navigation dynamique en fonction du r√¥le.
   * Exemple :

     * Admin ‚Üí Gestion utilisateurs, classes, mati√®res.
     * Enseignant ‚Üí Notes, bulletins.
     * Parent/√âl√®ve ‚Üí Consultation bulletin.

4. **Pages principales (CRUD) :**

   * **√âl√®ves** : liste, ajout, √©dition, suppression.
   * **Classes** : liste, ajout, √©dition.
   * **Mati√®res** : gestion mati√®res + coefficients.
   * **Notes** : saisie et modification par enseignant.
   * **Bulletins** : g√©n√©ration, affichage, export (PDF/Excel).
   * **Tableaux + formulaires** avec composants shadcn/ui.

5. **Affichage des Bulletins :**

   * Page d√©tail bulletin (avec mati√®res, notes, moyenne, rang, mention).
   * T√©l√©chargement PDF via backend.
   * Affichage graphique (progression, histogrammes, comparaisons).

6. **Tableaux de Bord & Statistiques :**

   * Dashboard par r√¥le :

     * Admin : stats globales (nb √©l√®ves, enseignants, classes).
     * Enseignant : progression par mati√®re.
     * √âl√®ve/Parent : suivi notes + recommandations IA.
   * Graphiques dynamiques avec Recharts.

7. **Int√©gration IA :**

   * Page ‚ÄúAnalyse‚Äù :

     * √âl√®ve : recommandations pour progresser.
     * Enseignant : analyse des tendances de classe.
   * Requ√™tes envoy√©es √† l‚Äôendpoint IA du backend ‚Üí affichage clair et graphique.

8. **S√©curit√© & UX :**

   * Routes prot√©g√©es (redirect si pas connect√©).
   * Validation des formulaires.
   * Notifications (shadcn Toast).
   * Dark mode (optionnel).

9. **Optimisation & PWA :**

   * Transformer l‚Äôapp en PWA (installable sur machine/√©cole).
   * Optimisation performance (lazy loading, code splitting).

10. **Tests & Livraison :**

    * Tests unitaires (React Testing Library).
    * V√©rification navigation et API calls.
    * Build optimis√© pour production.

---

### ‚úÖ Format de r√©ponse attendu de l‚ÄôIA

* Fournir le code complet de chaque √©tape (App.jsx, pages, composants).
* Ajouter explications claires.
* Fournir exemples d‚Äôutilisation (login, affichage d‚Äôun bulletin).
* Ne pas sauter d‚Äô√©tapes, g√©n√©rer √©tape par √©tape.
* Donner bonnes pratiques (clean code, responsive, accessibilit√©).
* Indiquer la prochaine √©tape √† chaque fin de r√©ponse.

---

üëâ Avec ce duo de **super prompts backend + frontend**, ton IA pourra g√©n√©rer **toute l‚Äôapplication de gestion de bulletins scolaires**, cl√© en main.

Veux-tu que je pr√©pare aussi un **planning de dev (roadmap semaine par semaine)** pour que tu saches dans quel ordre attaquer backend et frontend ?
